import os
import gspread
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from oauth2client.service_account import ServiceAccountCredentials

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TOKEN = os.getenv("TOKEN")
TABLE_NAME = '–°–ï–ö–° –®–û–ü –¢–û–í–ê–†–ò'
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE", "xsebot-37780ea5328e.json")
ORDER_SHEET_NAME = '–ó–ê–ú–û–í–õ–ï–ù–ù–Ø'
ADMIN_ID = 7779301550  # –¢–µ–ª–µ–≥—Ä–∞–º ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

user_cart = {}  # –°–ª–æ–≤–Ω–∏–∫ –∫–æ—à–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

# --- Google Sheets ---
def get_gsheet_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    return gspread.authorize(creds)

def get_products_from_sheet(sheet_name):
    client = get_gsheet_client()
    sheet = client.open(TABLE_NAME).worksheet(sheet_name)
    return sheet.get_all_records()

def get_categories():
    client = get_gsheet_client()
    sheet = client.open(TABLE_NAME)
    return [ws.title for ws in sheet.worksheets() if ws.title != ORDER_SHEET_NAME]

def save_order(name, phone, np, items, total):
    client = get_gsheet_client()
    sheet = client.open(TABLE_NAME).worksheet(ORDER_SHEET_NAME)
    sheet.append_row([name, phone, np, "; ".join(items), total, datetime.now().strftime("%Y-%m-%d %H:%M:%S")])

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_cart[update.effective_user.id] = []
    categories = get_categories()
    buttons = [[InlineKeyboardButton(cat, callback_data=f"category:{cat}")] for cat in categories]
    filters_row = [
        InlineKeyboardButton("üí∏ –î–æ 300 –≥—Ä–Ω", callback_data="filter:0:300"),
        InlineKeyboardButton("üí∞ 300‚Äì600 –≥—Ä–Ω", callback_data="filter:300:600"),
        InlineKeyboardButton("üíé –ü–æ–Ω–∞–¥ 600 –≥—Ä–Ω", callback_data="filter:600:10000")
    ]
    markup = InlineKeyboardMarkup(buttons + [filters_row] + [[InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="view_cart")]])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ –∞–±–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —Ü—ñ–Ω–æ—é:", reply_markup=markup)

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data.split(":")[1]
    products = get_products_from_sheet(category)
    for idx, product in enumerate(products):
        text = f"*{product['–ù–ê–ó–í–ê']}*\n{product['–û–ü–ò–°']}\nüí∞ {product['–¶–Ü–ù–ê']}"
        buttons = [[InlineKeyboardButton("üõí –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data=f"add:{category}:{idx}")]]
        markup = InlineKeyboardMarkup(buttons)
        try:
            await query.message.reply_photo(photo=product['–§–û–¢–û'], caption=text, parse_mode="Markdown", reply_markup=markup)
        except:
            await query.message.reply_text(text, parse_mode="Markdown", reply_markup=markup)

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞ ‚úÖ")
    user_id = query.from_user.id
    _, category, idx = query.data.split(":")
    product = get_products_from_sheet(category)[int(idx)]
    item_text = f"{product['–ù–ê–ó–í–ê']} ({product['–¶–Ü–ù–ê']})"
    user_cart.setdefault(user_id, []).append(item_text)

async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    cart = user_cart.get(user_id, [])
    if not cart:
        await query.message.reply_text("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üß∫")
        return
    text = "üßæ *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n" + "\n".join(cart) + "\n\n‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è, —Ç–µ–ª–µ—Ñ–æ–Ω —ñ –ù–æ–≤—É –ü–æ—à—Ç—É —á–µ—Ä–µ–∑ –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é: \n`–Ü–º‚Äô—è; –¢–µ–ª–µ—Ñ–æ–Ω; –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è`"
    context.user_data['ordering'] = True
    await query.message.reply_text(text, parse_mode="Markdown")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if context.user_data.get("ordering"):
        context.user_data["ordering"] = False
        cart = user_cart.get(user_id, [])
        total_price = sum([int(i.split("(")[1].split("–≥—Ä–Ω")[0].strip()) for i in cart if "–≥—Ä–Ω" in i])
        save_order_data = [s.strip() for s in update.message.text.strip().split(";")]
        if len(save_order_data) < 3:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å *–Ü–º‚Äô—è; –¢–µ–ª–µ—Ñ–æ–Ω; –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏* –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É, —Ä–æ–∑–¥—ñ–ª—è—é—á–∏ –∫—Ä–∞–ø–∫–æ—é –∑ –∫–æ–º–æ—é.", parse_mode="Markdown")
            return
        name, phone, np = save_order_data[0], save_order_data[1], save_order_data[2]
        save_order(name, phone, np, cart, f"{total_price} –≥—Ä–Ω")
        await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.")
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"üì• –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø:\nüë§ {name}\nüìû {phone}\nüè§ –ù–ü: {np}\nüì¶ {len(cart)} —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å—É–º—É {total_price} –≥—Ä–Ω")
        user_cart[user_id] = []

async def handle_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, min_price, max_price = query.data.split(":")
    min_price = int(min_price)
    max_price = int(max_price)
    all_products = []
    for category in get_categories():
        all_products += get_products_from_sheet(category)
    filtered = [p for p in all_products if min_price <= int(p['–¶–Ü–ù–ê'].replace("–≥—Ä–Ω", "").strip()) <= max_price]
    if not filtered:
        await query.message.reply_text("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ü—å–æ–º—É —Ü—ñ–Ω–æ–≤–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ.")
        return
    for product in filtered:
        text = f"*{product['–ù–ê–ó–í–ê']}*\n{product['–û–ü–ò–°']}\nüí∞ {product['–¶–Ü–ù–ê']}"
        try:
            await query.message.reply_photo(photo=product['–§–û–¢–û'], caption=text, parse_mode="Markdown")
        except:
            await query.message.reply_text(text, parse_mode="Markdown")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_category, pattern="^category:"))
    app.add_handler(CallbackQueryHandler(add_to_cart, pattern="^add:"))
    app.add_handler(CallbackQueryHandler(view_cart, pattern="^view_cart$"))
    app.add_handler(CallbackQueryHandler(handle_filter, pattern="^filter:"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()

if __name__ == '__main__':
    main()
